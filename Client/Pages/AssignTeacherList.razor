@page "/assignTeacherList"
@using ClassTracking.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@using MudBlazor
@using System.Globalization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = "Admin")]
@using Blazored.Toast.Configuration
@inject IAssignTeacherService AssignTeacherService
@inject ITeacherService TeacherService
@inject IClassService ClassService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h3 style="margin-top: -14px;">Add / Edit Assign Teacher: </h3>
<hr />

<MudCard>
    <EditForm Model="@assignTeacher">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-3">
                <div class="form-group" style="padding-left: 10px;">
                    <label for="TeacherId" class="control-label">Teacher Name:<span style="color:red;">*</span></label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@teachers @bind-Value=@assignTeacher.TeacherId
                                    Placeholder="--Select Student--" TextProperty="Name" ValueProperty="TeacherId" Change=@(args => OnChangeTeacher(args, "Filter Student")) Style="padding-top: 7px;" Class="w-100" />
                    &nbsp;<ValidationMessage For="@(() => assignTeacher.TeacherId)" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="ClassId" class="control-label">Class Name:<span style="color:red;">*</span></label>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@classes @bind-Value=@assignTeacher.ClassId
                                    Placeholder="--Select Student--" TextProperty="Name" ValueProperty="ClassId" Change=@(args => OnChangeClass(args, "Filter Student")) Style="padding-top: 7px;" Class="w-100" />
                    &nbsp;<ValidationMessage For="@(() => assignTeacher.ClassId)" />
                </div>
            </div>
            @if (Id == 0)
            {
                <div class="col-md-3">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" @onclick="@Create" value="Create" style="margin-left: 10px; margin-top: 36px;" />
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" @onclick="@Update" value="Update" style="margin-left: 10px; margin-top: 36px;" />
                    </div>
                </div>
            }
        </div>
    </EditForm>
</MudCard>

@if (assignTeachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@assignTeachers" Class="mt-5"
              Dense="@true" Hover="@true" Bordered="@true" Striped="@true"
              Filter="new Func<AssignTeacher,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Assign Teacher List:<hr /> </MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Teacher Name</MudTh>
            <MudTh>Class Name</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Teacher Name">@context.Teacher.Name</MudTd>
            <MudTd DataLabel="Class Name">@context.Class.Name</MudTd>
            <MudTd DataLabel="Action">
                <button type="button" class="btn btn-link" @onclick="() => Edit(context.AssignTeacherId)">
                    <i class="oi oi-pencil" />
                </button>
                <button type="button" class="btn btn-link" @onclick="() => Delete(context.AssignTeacherId)">
                    <i class="oi oi-trash" />
                </button>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" RowsPerPageString="Rows Per Page:"></MudTablePager>
        </PagerContent>
    </MudTable>
}

@code {
    public int Id { get; set; } = 0;
    private IEnumerable<AssignTeacher> assignTeachers { get; set; } = new List<AssignTeacher>();
    private IEnumerable<Teacher> teachers { get; set; } = new List<Teacher>();
    private IEnumerable<Class> classes { get; set; } = new List<Class>();
    public AssignTeacher assignTeacher { get; set; } = new AssignTeacher();
    private string searchString1 = "";
    private AssignTeacher selectedItem1 = null;
    private HashSet<AssignTeacher> selectedItems = new HashSet<AssignTeacher>();
    private int count { get; set; }
    private int countTeacher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        assignTeachers = await AssignTeacherService.GetAssignTeachers();
        teachers = await TeacherService.GetTeachers();
        classes = await ClassService.GetClasses();
    }

    protected async Task OnChangeTeacher(object value, string name)
    {
        count = await TeacherService.GetAssignTecher(assignTeacher.TeacherId);
        if (count > 0)
        {
            ToastService.ShowWarning("Already this teacher in a Class?");
        }
    }

    protected async Task OnChangeClass(object value, string name)
    {
        countTeacher = await TeacherService.GetTotalTeacherInClass(assignTeacher.ClassId);
        if (countTeacher > 0)
        {
            ToastService.ShowWarning("Already this class has a Teacher?");
        }
    }

    protected async Task Create()
    {
        if (assignTeacher.TeacherId == 0)
        {
            ToastService.ShowWarning("Teacher Name is Required?");
        }
        else if (assignTeacher.ClassId == 0)
        {
            ToastService.ShowWarning("Class Name is Required?");
        }
        else
        {
            count = await TeacherService.GetAssignTecher(assignTeacher.TeacherId);
            countTeacher = await TeacherService.GetTotalTeacherInClass(assignTeacher.ClassId);
            if (count > 0)
            {
                ToastService.ShowWarning("Already this teacher in a Class?");
            }
            else if (countTeacher >= 60)
            {
                ToastService.ShowWarning("Already this class has a Teacher?");
            }
            else
            {
                await AssignTeacherService.PostAssignTeacher(assignTeacher);
                Clear();
                await LoadData();
                ToastService.ShowSuccess("Created Successfully.");
            }
        }
    }

    protected async Task Edit(int assignTeacherId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure to edit this?");
        if (confirmed)
        {
            assignTeacher = await AssignTeacherService.GetAssignTeacher(assignTeacherId);
            Id = assignTeacher.AssignTeacherId;
        }
    }

    protected async Task Delete(int assignTeacherId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete this?");
        if (confirmed)
        {
            await AssignTeacherService.DeleteAssignTeacher(assignTeacherId);
            await LoadData();
            ToastService.ShowSuccess("Deleted Successfully.");
        }
    }

    protected async Task Update()
    {
        if (assignTeacher.TeacherId == 0)
        {
            ToastService.ShowWarning("Teacher Name is Required?");
        }
        else if (assignTeacher.ClassId == 0)
        {
            ToastService.ShowWarning("Class Name is Required?");
        }
        else
        {
            countTeacher = await TeacherService.GetTotalTeacherInClass(assignTeacher.ClassId);
            if (countTeacher > 0)
            {
                ToastService.ShowWarning("Already this class has a Teacher?");
            }
            else
            {
                await AssignTeacherService.PutAssignTeacher(Id, assignTeacher);
                Clear();
                await LoadData();
                ToastService.ShowSuccess("Updated Successfully.");
            }
        }
    }

    private bool FilterFunc1(AssignTeacher assignTeacher) => FilterFunc(assignTeacher, searchString1);

    private bool FilterFunc(AssignTeacher assignTeacher, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{assignTeacher.AssignTeacherId}".Contains(searchString))
            return true;
        if (assignTeacher.Teacher.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{assignTeacher.TeacherId}".Contains(searchString))
            return true;
        if (assignTeacher.Class.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{assignTeacher.ClassId}".Contains(searchString))
            return true;
        return false;
    }

    void Clear()
    {
        Id = 0;
        assignTeacher.AssignTeacherId = 0;
        assignTeacher.TeacherId = 0;
        assignTeacher.ClassId = 0;
    }
}

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />