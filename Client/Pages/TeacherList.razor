@page "/teacherList"
@using ClassTracking.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize(Roles = "Admin")]
@using Blazored.Toast.Configuration
@inject ITeacherService TeacherService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h3 style="margin-top: -14px;">Add / Edit Teacher: </h3>
<hr />

<MudCard>
    <EditForm Model="@teacher">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-3">
                <div class="form-group" style="padding-left: 10px;">
                    <label for="Name" class="control-label">Teacher Name:<span style="color:red;">*</span></label>
                    <input for="Name" class="form-control" @bind="@teacher.Name" />
                    &nbsp;<ValidationMessage For="@(() => teacher.Name)" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="Designation" class="control-label">Designation:<span style="color:red;">*</span></label>
                    <input for="Designation" class="form-control" @bind="@teacher.Designation" />
                </div>
            </div>
            @if (Id == 0)
            {
                <div class="col-md-3">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" @onclick="@CreateTeacher" value="Create" style="margin-left: 10px; margin-top: 28px;" />
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" @onclick="@UpdateTeacher" value="Update" style="margin-left: 10px; margin-top: 28px;" />
                    </div>
                </div>
            }
        </div>
    </EditForm>
</MudCard>

@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@teachers" Class="mt-5"
              Dense="@true" Hover="@true" Bordered="@true" Striped="@true"
              Filter="new Func<Teacher,bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Teacher List:<hr /> </MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Designation</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Designation">@context.Designation</MudTd>
            <MudTd DataLabel="Action">
                <button type="button" class="btn btn-link" @onclick="() => EditTeacher(context.TeacherId)">
                    <i class="oi oi-pencil" />
                </button>
                <button type="button" class="btn btn-link" @onclick="() => DeleteTeacher(context.TeacherId)">
                    <i class="oi oi-trash" />
                </button>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20}" RowsPerPageString="Rows Per Page:"></MudTablePager>
        </PagerContent>
    </MudTable>
}

@code {
    public int Id { get; set; } = 0;
    private IEnumerable<Teacher> teachers { get; set; } = new List<Teacher>();
    public Teacher teacher { get; set; } = new Teacher();
    private string searchString1 = "";
    private Teacher selectedItem1 = null;
    private HashSet<Teacher> selectedItems = new HashSet<Teacher>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        teachers = await TeacherService.GetTeachers();
    }

    protected async Task CreateTeacher()
    {
        if (teacher.Name == null || teacher.Name == string.Empty)
        {
            ToastService.ShowWarning("Teacher Name is Required?");
        }
        else
        {
            await TeacherService.PostTeacher(teacher);
            Clear();
            await LoadData();
            ToastService.ShowSuccess("Created Successfully.");
        }
    }

    protected async Task EditTeacher(int teacherId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure to edit this?");
        if (confirmed)
        {
            teacher = await TeacherService.GetTeacher(teacherId);
            Id = teacher.TeacherId;
        }
    }

    protected async Task DeleteTeacher(int teacherId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete this?");
        if (confirmed)
        {
            await TeacherService.DeleteTeacher(teacherId);
            await LoadData();
            ToastService.ShowSuccess("Deleted Successfully.");
        }
    }

    protected async Task UpdateTeacher()
    {
        if (teacher.Name == string.Empty)
        {
            ToastService.ShowWarning("Teacher Name is Required?");
        }
        else
        {
            await TeacherService.PutTeacher(Id, teacher);
            Clear();
            await LoadData();
            ToastService.ShowSuccess("Updated Successfully.");
        }
    }

    private bool FilterFunc1(Teacher teacher) => FilterFunc(teacher, searchString1);

    private bool FilterFunc(Teacher teacher, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (teacher.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{teacher.TeacherId}".Contains(searchString))
            return true;
        if (teacher.Designation.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void Clear()
    {
        Id = 0;
        teacher.TeacherId = 0;
        teacher.Name = "";
        teacher.Designation = "";
    }
}

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />